@model ASPCoreMVC.Web.Models.QARenderModal
@{
    var renderType = (ASPCoreMVC.Common.RenderExamTypes)ViewBag.RenderType;
}

@foreach (var q in Model.Questions)
{
    var affectedId = Guid.NewGuid();
    <input type="hidden" class="question-answered" data-q-id="@q.Id" id="@affectedId" data-ans-type="@Model.SkillPart.AnswerType.ToString()" />
    // Render for question
    if (Model.SkillPart.MasterContentType == ASPCoreMVC.Common.MasterContentTypes.Video && Model.SkillPart.AnswerType == ASPCoreMVC.Common.AnswerTypes.RecorderAnswer && Model.SkillPart.QuestionContainers.Count >= 1)
    {
        <div class="pt-3">
            <label class="d-inline">
                @Html.Raw(q.Text)
            </label>

        </div>
        @if (Model.Questions.Count == 1)
        {
            <div class="border border-warning p-3 artical transcriptable my-2" data-id="@q.Id"></div>
        }
    }
    else if (Model.SkillPart.IsHaveQuestionText)
    {
        <div class="pt-3">
            <label class="d-inline">
                @Html.Raw($"{Model.Counter++}. {q.Text}")
            </label>
            @if (!q.Explain.IsNullOrEmpty() && renderType != ASPCoreMVC.Common.RenderExamTypes.Synthetic)
            {
                <span data-toggle="tooltip" data-placement="top"
                      data-html="true"
                      title="@Html.Raw(q.Explain)">
                    <i class="fas fa-info-circle align-middle shake-infinite-sm text-info mr-2"></i>
                </span>
            }
        </div>
        @if ((Model.SkillPart.MasterContentType == ASPCoreMVC.Common.MasterContentTypes.Audio ||
           Model.SkillPart.MasterContentType == ASPCoreMVC.Common.MasterContentTypes.Video) && Model.Questions.Count == 1)
        {
            <div class="border border-warning p-3 artical transcriptable my-2" data-id="@q.Id"></div>
        }
    }
    else
    {
        <span class="float-left" style="width: 35px;">
            @Html.Raw($"{Model.Counter++}.")
        </span>
    }
    if (Model.SkillPart.AnswerType == ASPCoreMVC.Common.AnswerTypes.TextAnswer)
    {
        var count = 0;
        var columnCount = (int)Math.Ceiling(12 / (decimal)q.Answers.Count);
        if (Model.SkillPart.IsVerticalAnswerDisplay)
            columnCount = 12;
        <div class="row">
            @* Render for answers *@
            @foreach (var ans in q.Answers)
            {
                <div class="col-12 col-lg-@columnCount text-ans" data-affect-id="@affectedId"
                     id="@ans.Id">
                    <span class="c-able">@(EzNumber.ToAlphabetNumeral(count++))</span>.
                    @Html.Raw(ans.AnswerContent)
                </div>
            }
        </div>
    }
    else if (Model.SkillPart.AnswerType == ASPCoreMVC.Common.AnswerTypes.FillAnswer)
    {
        bool isSplitInput = false;
        if (Model.SkillPart.MasterContentType == ASPCoreMVC.Common.MasterContentTypes.Rewrite)
        {
            isSplitInput = q.TextClone.Contains("{{input}}");
        }
        if (isSplitInput)
        {
            var strings = q.TextClone.Split("{{input}}", 2);
            <div class="pt-0">
                <label>
                    @Html.Raw(strings.JoinAsString($"<input class=\"auto-sizing input-border fill-ans\" type=\"text\" data-affect-id=\"{affectedId}\">"))
                </label>
            </div>
        }
        else
        {
            <div class="input-group mb-3">
                <div class="input-group-prepend">
                    <span class="input-group-text" id="basic-addon1">@L["Your answer"]</span>
                </div>
                <input type="text" class="form-control fill-ans" data-affect-id="@affectedId">
            </div>
        }
    }
    else if (Model.SkillPart.AnswerType == ASPCoreMVC.Common.AnswerTypes.ImageAnswer)
    {
        var count = 0;
        var columnCount = (int)Math.Ceiling(12 / (decimal)q.Answers.Count);
        if (Model.SkillPart.IsVerticalAnswerDisplay)
            columnCount = 12;
        <div class="row">
            @* Render for answers *@
            @foreach (var ans in q.Answers)
            {
                var alpha = EzNumber.ToAlphabetNumeral(count++);
                <div class="col-12 col-lg-@columnCount">
                    <div class="img-ans" data-affect-id="@affectedId"
                         id="@ans.Id">
                        <span class="c-able">@alpha</span>.
                        @L["Picture"] @alpha
                    </div>
                    <div>
                        <img src="@Html.Raw(ans.AnswerContent)" class="w-100 border rounded" />
                    </div>
                </div>
            }
        </div>
    }
    else if (Model.SkillPart.AnswerType == ASPCoreMVC.Common.AnswerTypes.RecorderAnswer)
    {
        <div id="viz-@affectedId" class="mt-2">
            <canvas id="analyser" class="w-100 d-none" style="height: 250px;"></canvas>
            <canvas id="wavedisplay-@affectedId" class="w-100 d-none" style="height: 250px;"></canvas>
        </div>
    }
    else if (Model.SkillPart.AnswerType == ASPCoreMVC.Common.AnswerTypes.WriteAnswer)
    {
        var id = Guid.NewGuid().ToString();
        <textarea id="@id" class="write-ans" editor-mint="true" data-affect-id="@affectedId"></textarea>
    }
}