@page "/exams/{renderType:int}/exam/{destId:Guid}"
@using ASPCoreMVC.TCUEnglish.UserExams
@using ASPCoreMVC.Web.Models
@model ASPCoreMVC.Web.Pages.Exams.ExamModel
@{
    Layout = AppTheme.ExamLayout;

    #region Declare current exam owner info
    var currentAvatar = "https://english.vistark.me/resources/33b55182-40ac-4f7b-9c3b-864b855fffb0_aspcore-maintainer.jpg";
    var currentUserDisplayName = "Nguyễn Trọng Nghĩa";
    #endregion

    #region Declare exam name
    var examName = "";
    if (Model.ExamContent.RenderExamType == ASPCoreMVC.Common.RenderExamTypes.SkillPart)
        examName = Model.ExamContent.SkillCategories.FirstOrDefault()?.SkillParts?.FirstOrDefault()?.Name ?? "";
    else if (Model.ExamContent.RenderExamType == ASPCoreMVC.Common.RenderExamTypes.SkillCategory)
        examName = Model.ExamContent.SkillCategories.FirstOrDefault()?.Name ?? "";
    else
        examName = Model.ExamContent.Name;
    examName += " testing";
    #endregion

    #region Declare exam limit time
    var limitTime = 0.0;
    if (Model.ExamContent.RenderExamType == ASPCoreMVC.Common.RenderExamTypes.SkillPart)
        limitTime = Model.ExamContent.SkillCategories.FirstOrDefault()?.SkillParts?.FirstOrDefault().LimitTimeInMinutes ?? 10F;
    else if (Model.ExamContent.RenderExamType == ASPCoreMVC.Common.RenderExamTypes.SkillCategory)
        limitTime = Model.ExamContent.SkillCategories.FirstOrDefault()?.LimitTimeInMinutes ?? 20F;
    else
        limitTime = Model.ExamContent.SkillCategories.Sum(x => x.LimitTimeInMinutes);
    #endregion
}

@section Styles {
    <link rel="stylesheet"
          href="/dist/css/te.exam.css" />
    @if (Model.ExamContent.SkillCategories.FirstOrDefault()?.SkillParts.FirstOrDefault()?.AnswerType == ASPCoreMVC.Common.AnswerTypes.RecorderAnswer)
    {
        <link rel="stylesheet"
              href="~/plugins/recorderjs/recorderjs.css" />
    }
}

@section Scripts {
    <script src="/dist/js/te.exam.js"></script>
    @if (Model.ExamContent.SkillCategories.FirstOrDefault()?.SkillParts.FirstOrDefault()?.AnswerType == ASPCoreMVC.Common.AnswerTypes.RecorderAnswer)
    {
        <script src="/plugins/recorderjs/audiodisplay.js"></script>
        <script src="/plugins/recorderjs/recorder.js"></script>
        <script src="/plugins/recorderjs/main.js"></script>
        <script>
            $("#a123").click(function () {
                var uri = $("#save").attr('href');
                fetch(uri)
                    .then(res => res.blob()) // Gets the response and returns it as a blob
                    .then(blob => {
                        const audio = document.createElement("audio");

                        // Clean up the URL Object after we are done with it
                        audio.addEventListener("load", () => {
                            URL.revokeObjectURL(uri);
                        });

                        // Thay thế cho thông báo
                        $('#selected-audio').html(audio);

                        // Allow us to control the audio
                        audio.controls = "true";

                        // Set the src and start loading the audio from the file
                        audio.src = uri;

                        document.getElementById('ahihi').innerHTML(audio)
                    });
                initAudioPlayer();
            });
        </script>
    }

    <script>
        $(document).ready(function () {
            startExamCountDown('@limitTime', function () {
                alert("Done");
            });
        });
    </script>
}

<div class="">
    <div class="bg-primary card shadow rounded d-flex flex-row align-items-center justify-content-between text-white">
        <div>
            <img class="rounded-circle m-2 border border-white shadow-sm" src="@currentAvatar" style="width:2.5rem;height:2.5rem;" />
            <span class="font-weight-bold">
                @Html.Raw(currentUserDisplayName)
            </span>
        </div>
        <div class="text-right m-2 pr-2">
            <div class="font-weight-bolder text-uppercase m-0">
                @examName
            </div>
            <div class="font-weight-bolder small">
                @L["Limit time"]: @limitTime (@L["minutes"])
            </div>
        </div>
    </div>
    <div class="card shadow mb-4 rounded-0" style="top: -0.35rem;">
        <div class="card-body mb-3 p-2 p-lg-5">
            @* Start Test result *@
            <div class="row border rounded border-primary mx-0">
                <div class="col-3 p-0 border-right border-primary">
                    <div class="border-bottom text-center p-2 font-weight-bold border-primary">
                        @L["Scores"]
                    </div>
                    <div class="text-center p-md-5">
                        <h2 class="m-0 font-weight-bold font-italic text-danger">
                            --
                        </h2>
                    </div>
                </div>
                <div class="col-9 p-0">
                    <div class="border-bottom text-center p-2 font-weight-bold border-primary">
                        @L["Criticism of instructors"]
                    </div>
                    <div class="p-3">

                    </div>
                </div>
            </div>
            @* End Test result *@

            <hr class="" />
            @{
                var qCount = 1;
            }
            @for (int i = 0; i < Model.ExamContent.SkillCategories.Count; i++)
            {
                var skpCount = 1;
                <h5 class="text-uppercase font-weight-bolder">@EzNumber.ToRomanNumeral(i + 1). @Model.ExamContent.SkillCategories[i].Name</h5>
                <div>
                    @foreach (var skp in Model.ExamContent.SkillCategories[i].SkillParts)
                    {
                        <h5 class="font-weight-bold">@(skpCount++). @skp.Name</h5>
                        <div>
                            @Html.Raw(skp.Instructions)
                        </div>
                        // Question container render
                        @foreach (var qc in skp.QuestionContainers)
                        {
                            var qaCol = 12; // Số cột của mục câu hỏi và câu trả lời
                            <div class="text-lg" style="font-size: 21px;">
                                <div class="row mb-4">
                                    @if (skp.MasterContentType == ASPCoreMVC.Common.MasterContentTypes.Article)
                                    {
                                        <div class="col-12 p-2 my-2 border rounded border-dark replace-count artical" data-start-count="@qCount">
                                            @Html.Raw(qc.Article)
                                        </div>
                                    }
                                    else if (skp.MasterContentType == ASPCoreMVC.Common.MasterContentTypes.Audio)
                                    {
                                        <div class="col-12 my-2 v-audio audio-player">
                                            <audio crossorigin="use-credentials">
                                                <source src="@qc.MediaPath">
                                            </audio>
                                        </div>
                                    }
                                    else if (skp.MasterContentType == ASPCoreMVC.Common.MasterContentTypes.Image)
                                    {
                                        qaCol = 8;
                                        <div class="col-lg-4 order-md-2">
                                            <span>
                                                <img class="w-100 border border-dark rounded" src="@Html.Raw(qc.MediaPath)">
                                            </span>
                                        </div>
                                    }
                                    else if (skp.MasterContentType == ASPCoreMVC.Common.MasterContentTypes.Video)
                                    {
                                        <div class="col-12 text-center my-2">
                                            <video class="w-100 player" preload="metadata" playsinline controls>
                                                <source src="@qc.MediaPath">
                                                @L["Your browser does not support the video tag."]
                                            </video>
                                        </div>
                                    }
                                    else
                                    {

                                    }
                                    <div class="col-12 col-lg-@qaCol">
                                        @await Html.PartialAsync(AppTheme.PartialQARender, new QARenderModal(qCount, qc.Questions, skp))
                                    </div>
                                </div>
                            </div>
                            qCount += qc.Questions.Count;
                        }
                    }
                </div>
            }
        </div>
    </div>
</div>