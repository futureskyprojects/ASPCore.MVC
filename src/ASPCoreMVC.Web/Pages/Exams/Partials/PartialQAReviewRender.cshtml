@using ASPCoreMVC.TCUEnglish.ExamLogs;
@using ASPCoreMVC.TCUEnglish.UserExams;

@model ASPCoreMVC.Web.Models.QARenderModal
@{
    var IsInstructorReview = (bool)ViewBag.IsInstructorReview;
    var ExamLogId = (Guid)ViewBag.ExamLogId;

    var qaPairs = (List<QAPairDTO>)ViewBag.Answers;
    var circleAnswerClasses = "rounded-circle border px-2";
    bool IsUserCorrectAns(Guid qId, MicroAnswerDTO ans)
    {
        return qaPairs.Any(x => x.QuestionId == qId && x.Answer == ans.Id.ToString()) && ans.IsCorrect;
    }
    string AnsByQuestion(Guid qId)
    {
        return qaPairs.FirstOrDefault(x => x.QuestionId == qId)?.Answer ?? "";
    }
    string RenderForQuestionState(MicroQuestionDTO q)
    {
        var fillAns = qaPairs.FirstOrDefault(x => x.QuestionId == q.Id)?.Answer ?? "";
        if (q.Answers.Any(x => x.IsCorrect && x.AnswerContent.Trim().Equals(fillAns.Trim(), StringComparison.OrdinalIgnoreCase)))
            return "correct-fill";
        else
            return "wrong-fill";
    }
    string RenderForOtherResult(MicroQuestionDTO q)
    {
        var fillAns = qaPairs.FirstOrDefault(x => x.QuestionId == q.Id)?.Answer ?? "";
        var otherAns = q.Answers.Where(x => x.IsCorrect &&
        !x.AnswerContent.Trim().Equals(fillAns.Trim(), StringComparison.OrdinalIgnoreCase) &&
        !x.AnswerContent.IsNullOrEmpty())
            .Select(x => x.AnswerContent).ToList();
        if (otherAns.Count > 0)
            return otherAns.JoinAsString(" / ");
        else
            return "";
    }
    string CorrectClass(Guid qId, MicroAnswerDTO ans)
    {
        var classes = "";
        var isUserCorrectAns = IsUserCorrectAns(qId, ans);
        if (isUserCorrectAns && ans.IsCorrect)
        {
            classes = circleAnswerClasses + " border-success";
        }
        else if (ans.IsCorrect)
        {
            classes = circleAnswerClasses + " border-danger";
        }
        else if (isUserCorrectAns)
        {
            classes = circleAnswerClasses + " border-dark";
        }
        return classes;
    }
}
@foreach (var q in Model.Questions)
{
    var affectedId = Guid.NewGuid();


    <input type="hidden" class="question-answered" data-q-id="@q.Id" id="@affectedId" data-ans-type="@Model.SkillPart.AnswerType.ToString()" />
    // Render for question
    if (Model.SkillPart.MasterContentType == ASPCoreMVC.Common.MasterContentTypes.Video && Model.SkillPart.AnswerType == ASPCoreMVC.Common.AnswerTypes.RecorderAnswer && Model.SkillPart.QuestionContainers.Count >= 1)
    {
        <div class="pt-3">
            <label>
                @Html.Raw(q.Text)
            </label>
            <button class="btn btn-sm btn-success shadow-sm float-right" id="start-recorder-@affectedId">
                <i class="fa fa-play mr-1"></i>
                @L["Start Recorder"]
            </button>
            <button class="btn btn-sm btn-danger shadow-sm d-none float-right" id="finish-recorder-@affectedId">
                <i class="fa fa-stop mr-1"></i>
                @L["Stop Recorder"]
            </button>
            <div class="d-none" id="audio-player-@affectedId">

            </div>
        </div>
    }
    else if (Model.SkillPart.IsHaveQuestionText)
    {
        <div class="pt-3">
            <label>
                @Html.Raw($"{Model.Counter++}. {q.Text}")
            </label>
        </div>
    }
    else
    {
        <span class="float-left" style="width: 35px;">
            @Html.Raw($"{Model.Counter++}.")
        </span>
    }
    if (Model.SkillPart.AnswerType == ASPCoreMVC.Common.AnswerTypes.TextAnswer)
    {
        var count = 0;
        var columnCount = (int)Math.Ceiling(12 / (decimal)q.Answers.Count);
        if (Model.SkillPart.IsVerticalAnswerDisplay)
            columnCount = 12;
        <div class="row">
            @* Render for answers *@
            @foreach (var ans in q.Answers)
            {
                <div class="col-12 col-lg-@columnCount" data-affect-id="@affectedId"
                     id="@ans.Id">
                    <span class="@CorrectClass(q.Id, ans)">@(EzNumber.ToAlphabetNumeral(count++))</span>.
                    @Html.Raw(ans.AnswerContent)
                </div>
            }
        </div>
    }
    else if (Model.SkillPart.AnswerType == ASPCoreMVC.Common.AnswerTypes.FillAnswer)
    {
        bool isSplitInput = false;
        var otherAns = RenderForOtherResult(q);
        if (Model.SkillPart.MasterContentType == ASPCoreMVC.Common.MasterContentTypes.Rewrite)
        {
            isSplitInput = q.TextClone.Contains("{{input}}");
        }
        if (isSplitInput)
        {
            var strings = q.TextClone.Split("{{input}}", 2);
            <div class="pt-0">
                <label>
                    @Html.Raw(strings.JoinAsString($"<input class=\"auto-sizing input-border fill-ans {RenderForQuestionState(q)}\" type=\"text\" data-affect-id=\"{affectedId}\" value=\"{AnsByQuestion(q.Id)}\" disabled>"))
                    @if (!otherAns.IsNullOrEmpty())
                    {
                        <span class="text-primary">(@Html.Raw(otherAns))</span>
                    }
                </label>
            </div>
        }
        else
        {
            <div class="input-group mb-3">
                <div class="input-group-prepend">
                    <span class="input-group-text" id="basic-addon1">@L["Your answer"]</span>
                </div>
                <input type="text" class="form-control fill-ans @RenderForQuestionState(q)" data-affect-id="@affectedId" disabled value="@AnsByQuestion(q.Id)">
                @if (!otherAns.IsNullOrEmpty())
                {
                    <span class="text-primary">(@Html.Raw(otherAns))</span>
                }
            </div>
        }
    }
    else if (Model.SkillPart.AnswerType == ASPCoreMVC.Common.AnswerTypes.ImageAnswer)
    {
        var count = 0;
        var columnCount = (int)Math.Ceiling(12 / (decimal)q.Answers.Count);
        if (Model.SkillPart.IsVerticalAnswerDisplay)
            columnCount = 12;
        <div class="row">
            @* Render for answers *@
            @foreach (var ans in q.Answers)
            {
                var alpha = EzNumber.ToAlphabetNumeral(count++);
                <div class="col-12 col-lg-@columnCount">
                    <div class="" data-affect-id="@affectedId"
                         id="@ans.Id">
                        <span class="@CorrectClass(q.Id, ans)">@alpha</span>.
                        @L["Picture"] @alpha
                    </div>
                    <div class="mt-2">
                        <img src="@Html.Raw(ans.AnswerContent)" class="w-100 border rounded" />
                    </div>
                </div>
            }
        </div>
    }
    else if (Model.SkillPart.AnswerType == ASPCoreMVC.Common.AnswerTypes.RecorderAnswer)
    {

    }
    else if (Model.SkillPart.AnswerType == ASPCoreMVC.Common.AnswerTypes.WriteAnswer)
    {
        <div class="">
            <nav>
                <div class="nav nav-tabs" id="nav-tab" role="tablist">
                    <a class="nav-link active" id="nav-student-res-tab" data-toggle="tab" href="#nav-student-res" role="tab" aria-controls="nav-student-res" aria-selected="true">
                        @L["Original paragraph"]
                    </a>
                    <a class="nav-link" id="nav-instructor-res-tab-tab" data-toggle="tab" href="#nav-instructor-res-tab" role="tab" aria-controls="nav-instructor-res-tab" aria-selected="false">
                        @if (IsInstructorReview)
                        {
                            @L["Edit your student paragraph"]
                        }
                        else
                        {
                            @L["Paragraph after editing"]
                        }
                    </a>
                </div>
            </nav>
            <div class="tab-content border" id="nav-tabContent">
                <div class="tab-pane fade show active p-3" id="nav-student-res" role="tabpanel" aria-labelledby="nav-student-res-tab">
                    @Html.Raw(AnsByQuestion(q.Id))
                </div>
                <div class="tab-pane fade p-3" id="nav-instructor-res-tab" role="tabpanel" aria-labelledby="nav-instructor-res-tab-tab">
                    @if (IsInstructorReview)
                    {
                        var tempZId = Guid.NewGuid().ToString();
                        if (q.CorrectContentByInstructor.IsNullOrEmpty())
                            q.CorrectContentByInstructor = AnsByQuestion(q.Id);
                        <form action="/api/app/exam-log/correct-content-answer/@ExamLogId" method="put" class="form-update-corrent-question">
                            <input type="hidden" name="id" value="@q.Id" />
                            <input type="hidden" name="scores" value="@q.Scores" id="@tempZId-scores-hi" />
                            <div class="form-group">
                                <label>
                                    @L["Scores"]: <span class="text-danger" id="@tempZId-scores">@q.Scores</span>
                                    <i class="fas fa-star text-info"></i>
                                </label>
                                <input type="range" class="form-control-range" id="@tempZId-inp"
                                       value="@q.Scores"
                                       min="0"
                                       max="@(Model.SkillPart.MaxScores/Model.SkillPart.QuestionContainers.Sum(x=>x.Questions.Count))">
                            </div>
                            <div class="form-group">
                                <label for="correctContentByInstructor">@L["Correct student paragraph"]</label>
                                <textarea class="form-control editor"
                                          name="correctContentByInstructor"
                                          editor-mint="true">@q.CorrectContentByInstructor</textarea>
                            </div>
                            <script>
                                document.getElementById('@tempZId-inp')
                                    .addEventListener('change', function (e) {
                                        document.getElementById('@tempZId-scores').innerHTML = e.target.value;
                                        document.getElementById('@tempZId-scores-hi').value = e.target.value;
                                    });
                            </script>
                            <div class="row">
                                <button type="submit" class="btn btn-primary btn-sm shadow-sm mx-auto">@L["Confirm"]</button>
                            </div>
                        </form>
                    }
                    else
                    {
                        if (q.CorrectContentByInstructor.IsNullOrEmpty())
                        {
                            <div class="text-primary font-italic text-center">@L["There is no editing from the instructor for your essay"]</div>
                        }
                        else
                        {
                            @Html.Raw(q.CorrectContentByInstructor)
                        }
                    }
                </div>
            </div>
        </div>
    }
}