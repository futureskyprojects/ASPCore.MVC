@using ASPCoreMVC.TCUEnglish.UserExams
@using ASPCoreMVC.Web.Models
@model ASPCoreMVC.Web.Models.ExamRenderViewModel
@{
    Layout = AppTheme.ExamLayout;
    ViewData["IsHaveBack"] = true;
    float timeInMinutes = (float)ViewBag.TimeInMinutes;
}
@section Styles {
    <link rel="stylesheet"
          href="/dist/css/te.exam.css" />
    @if (Model.ExamContent.SkillCategories.Any(x => x.SkillParts.Any(y => y.AnswerType == ASPCoreMVC.Common.AnswerTypes.RecorderAnswer)))
    {
        <link rel="stylesheet"
              href="/plugins/recorderjs/recorderjs.css" />
    }
    @if (Model.ExamContent.SkillCategories.Any(x => x.SkillParts.Any(y => y.MasterContentType == ASPCoreMVC.Common.MasterContentTypes.Video)))
    {
        <link rel="stylesheet" href="/plugins/plyr-3.6.4/plyr.css" />
    }
}

@section Scripts {
    <script src="~/dist/js/te.exam-preview.js"></script>
    @if (Model.ExamContent.SkillCategories.Any(x => x.SkillParts.Any(y => y.MasterContentType == ASPCoreMVC.Common.MasterContentTypes.Video)))
    {
        <script src="/plugins/plyr-3.6.4/plyr.polyfilled.js"></script>
        <script>
            const player = new Plyr('.player');
        </script>
    }

    <script>
        window.onload = function () {
            $("#loading-waiting").addClass("d-none");
        };
        $("#counter-content").html(secondsExtract(@timeInMinutes* 60));
        var stateElement = $("#line-counter");
        if (stateElement.hasClass("border-top-exam-success"))
            stateElement.removeClass("border-top-exam-success");
        if (!stateElement.hasClass("border-top-exam-primary"))
            stateElement.addClass("border-top-exam-primary");
    </script>
}

@Html.AntiForgeryToken()
<input type="hidden" value="@Model.ExamLogId" id="exam-log-id" />
<div class="" id="exam-content">
    <div class="bg-primary card shadow rounded d-flex flex-row align-items-center justify-content-between text-white">
        <div>
            <img class="rounded-circle m-2 border border-white shadow-sm" src="@Model.ExamUser.Picture" style="width:2.5rem;height:2.5rem;" />
            <span class="font-weight-bold">
                @Html.Raw(Model.ExamUser.UserName)
            </span>
        </div>
        <div class="text-right m-2 pr-2">
            <div class="font-weight-bolder text-uppercase m-0">
                @Model.ExamName
            </div>
            <div class="font-weight-bolder small">
                @L["Limit time"]: @Model.LimitTime (@L["minutes"])
            </div>
        </div>
    </div>
    <div class="card shadow mb-4 rounded-0" style="top: -0.35rem;">
        <div class="card-body mb-3 p-2 p-lg-5">
            @* Start Test result *@
            <div class="row border rounded border-primary mx-0">
                <div class="col-3 p-0 border-right border-primary">
                    <div class="border-bottom text-center p-2 font-weight-bold border-primary">
                        @L["Scores"]
                    </div>
                    <div class="text-center p-md-5">
                        <h2 class="m-0 font-weight-bold font-italic text-danger">
                            @ViewBag.Scores
                        </h2>
                        @if (!ViewBag.IsDoneScore)
                        {
                            <div class="small font-italic text-warning">(@L["Incomplete score"])</div>
                        }
                    </div>
                </div>
                <div class="col-9 p-0">
                    <div class="border-bottom text-center p-2 font-weight-bold border-primary">
                        @L["Criticism of instructors"]
                    </div>
                    <div class="p-3">

                    </div>
                </div>
            </div>
            @* End Test result *@

            <hr class="" />
            @{
                var qCount = 1;
            }
            @for (int i = 0; i < Model.ExamContent.SkillCategories.Count; i++)
            {
                var skpCount = 1;
                <h5 class="text-uppercase font-weight-bolder">@EzNumber.ToRomanNumeral(i + 1). @Model.ExamContent.SkillCategories[i].Name</h5>
                <div>
                    @foreach (var skp in Model.ExamContent.SkillCategories[i].SkillParts)
                    {
                        <h5 class="font-weight-bold">@(skpCount++). @skp.Name</h5>
                        <div>
                            @Html.Raw(skp.Instructions)
                        </div>
                        // Question container render
                        @foreach (var qc in skp.QuestionContainers)
                        {
                            var qaCol = 12; // Số cột của mục câu hỏi và câu trả lời
                            <div class="text-lg" style="font-size: 21px;">
                                <div class="row mb-4">
                                    @if (skp.MasterContentType == ASPCoreMVC.Common.MasterContentTypes.Article)
                                    {
                                        <div class="col-12 p-2 my-2 border rounded border-dark replace-count artical load-artical-async"
                                             data-qc-id="@qc.Id"
                                             data-start-count="@qCount">
                                        </div>
                                    }
                                    else if (skp.MasterContentType == ASPCoreMVC.Common.MasterContentTypes.Audio)
                                    {
                                        <div class="col-12 my-2 v-audio audio-player">
                                            <audio crossorigin="use-credentials">
                                                <source src="@qc.MediaPath">
                                            </audio>
                                        </div>
                                    }
                                    else if (skp.MasterContentType == ASPCoreMVC.Common.MasterContentTypes.Image)
                                    {
                                        qaCol = 8;
                                        <div class="col-lg-4 order-md-2">
                                            <span>
                                                <img class="w-100 border border-dark rounded" src="@Html.Raw(qc.MediaPath)">
                                            </span>
                                        </div>
                                    }
                                    else if (skp.MasterContentType == ASPCoreMVC.Common.MasterContentTypes.Video)
                                    {
                                        <div class="col-12 text-center my-2">
                                            <video class="w-100 player" preload="metadata" playsinline controls>
                                                <source src="@qc.MediaPath">
                                                @L["Your browser does not support the video tag."]
                                            </video>
                                        </div>
                                    }
                                    else
                                    {

                                    }
                                    <div class="col-12 col-lg-@qaCol">
                                        @await Html.PartialAsync(AppTheme.PartialQAReviewRender, new QARenderModal(qCount, qc.Questions, skp))
                                    </div>
                                </div>
                            </div>
                            qCount += qc.Questions.Count;
                        }
                    }
                </div>
            }
        </div>
        @*<div class="card-footer text-center">
                <button class="btn btn-primary btn-sm shadow-sm" id="complete-exam-button">@L["Complete the exam"]</button>
            </div>*@
    </div>
</div>